                    #version 460 core 
                    uniform vec3 u_la; 
                    uniform vec3 u_ld; 
                    uniform vec3 u_ls; 
                    uniform vec3 u_ka; 
                    uniform vec3 u_kd; 
                    uniform vec3 u_ks; 
                    uniform float u_matShine; 
                    uniform int u_lPressed; 
                    out vec4 FragColor; 
                    in vec3 t_normal; 
                    in vec3 lightDirection; 
                    in vec3 viewerVector; 
                    void main(void) { 
                       vec3 phong_ads_light; 
                       if(u_lPressed == 1) { 
                           vec3 n_tNormal = normalize(t_normal); 
                           vec3 n_lightDirection = normalize(lightDirection); 
                           vec3 n_viewerVec = normalize(viewerVector); 
                           float tn_dot_ld = max(dot(n_lightDirection, n_tNormal), 0.0); 
                           vec3 reflectionVector = reflect(-n_lightDirection, n_tNormal); 
                           vec3 ambient = u_la * u_ka; 
                           vec3 diffuse = u_ld * u_kd * tn_dot_ld; 
                           vec3 specular= u_ls * u_ks * pow(max(dot(reflectionVector, n_viewerVec), 0.0), u_matShine); 
                           phong_ads_light = ambient + diffuse + specular; 
                       } 
                       else { 
                           phong_ads_light = vec3(1.0, 1.0, 1.0); 
                       } 
                       FragColor = vec4(phong_ads_color, 1.0); 
                    };